<template>
  <b-container fluid>
    <!-- User Interface controls -->

    <button  @click="PrintMe" class="DontPrint">Print</button>

    <b-row class="DontPrint">
          <b-col lg="6" class="my-1">
            <b-form-group
              label="Filter"
              label-cols-sm="3"
              label-align-sm="right"
              label-size="sm"
              label-for="filterInput"
              class="mb-0"
            >
              <b-input-group size="sm">
                <b-form-input
                  v-model="filter"
                  type="search"
                  id="filterInput"
                  placeholder="Type to Search"
                ></b-form-input>
                <b-input-group-append>
                  <b-button :disabled="!filter" @click="filter = ''">Clear</b-button>
                </b-input-group-append>
              </b-input-group>
            </b-form-group>
          </b-col>

          <b-col sm="5" md="6" class="my-1">
       <b-form-group
         label="Per page"
         label-cols-sm="6"
         label-cols-md="4"
         label-cols-lg="3"
         label-align-sm="right"
         label-size="sm"
         label-for="perPageSelect"
         class="mb-0"
       >
         <b-form-select
           v-model="perPage"
           id="perPageSelect"
           size="sm"
           :options="pageOptions"
         ></b-form-select>
       </b-form-group>
     </b-col>
        </b-row>
    <!-- Main table element -->

    <b-table
      show-empty
      small
      stacked="md"
      :items="items"
      :fields="fields"
      :current-page="currentPage"
     :per-page="perPage"
     :filter="filter"
     :filterIncludedFields="filterOn"
     :sort-by.sync="sortBy"
     :sort-desc.sync="sortDesc"
     :sort-direction="sortDirection"
     @filtered="onFiltered"
    >

      <template v-slot:cell(name)="row">
        {{ row.value.first }} {{ row.value.last }}
      </template>

      <template v-slot:cell(actions)="row">
        <b-button size="sm" @click="info(row.item, row.index, $event.target)" class="mr-1">
          Info modal
        </b-button>
        <b-button size="sm" @click="row.toggleDetails">
          {{ row.detailsShowing ? 'Hide' : 'Show' }} Details
        </b-button>
      </template>

      <template v-slot:row-details="row">
        <b-card>
          <ul>
            <li v-for="(value, key) in row.item" :key="key">{{ key }}: {{ value }}</li>
          </ul>
        </b-card>
      </template>
    </b-table>
  <b-row class="DontPrint">

      <b-col sm="7" md="6" class="my-1">
        <b-pagination
          v-model="currentPage"
          :total-rows="totalRows"
          :per-page="perPage"
          align="fill"
          size="sm"
          class="my-0"
        ></b-pagination>
      </b-col>
  </b-row>

    <!-- Info modal -->
    <b-modal :id="infoModal.id" :title="infoModal.title" ok-only @hide="resetInfoModal">
      <pre>{{ infoModal.content }}</pre>
    </b-modal>
  </b-container>
</template>

<script>
  import Axios from "axios";
  export default {
    name: 'TestingTable',

    data() {
      return {
        items: [],
        fields: [
          { key: 'id', label: 'id', sortable: true,  class: 'text-center', sortDirection: 'desc'  },
          { key: 'room_number', label: 'Room Number', class: 'text-center', sortable: true, sortDirection: 'desc' },
          { key: 'room_name', label: 'Room Name', sortable: true, class: 'text-center' },
          { key: 'room_type', label: 'Room Type', sortable: true, class: 'text-center' },
          { key: 'room_capacity', label: 'Room Capacity', sortable: true, class: 'text-center' },
          { key: 'actions', label: 'Actions' , class: 'text-center' }
        ],
        totalRows: 1,
        currentPage: 1,
        perPage: 5,
        pageOptions: [5, 10, 15],
        sortBy: '',
        sortDesc: false,
        sortDirection: 'asc',
        filter: null,
        filterOn: [],
        infoModal: {
          id: 'info-modal',
          title: '',
          content: ''
        },

        rowData: null,
      }
    },
    computed: {
      sortOptions() {
        // Create an options list from our fields
        return this.fields
          .filter(f => f.sortable)
          .map(f => {
            return { text: f.label, value: f.key }
          })
      }
    },
    mounted() {
      this.getRooms();
      // Set the initial number of items
      // this.totalRows = this.items.length
    },
    methods: {

      PrintMe: function(){

        var print = document.getElementsByClassName("DontPrint")
        var footer = document.getElementsByTagName("FOOTER")

        for (var i = 0; i < print.length; i++) {
          print[i].style.display = "none"
          print[i].style.visibility = "hidden"
        };
        window.print();
        window.close();
        for (var i = 0; i < print.length; i++) {
          print[i].style.display = "block"
          print[i].style.visibility = ""
        };
      },

      getRooms: function(){
        Axios
          .get('http://localhost/api/v1/rooms', {
            headers: {'Authorization': 'Bearer ' + this.$store.getters.getToken}
          })
          .then(response => {
            this.items = response.data;
            console.log(response.data);
          })
          .catch(error => {
            this.alertMessage = error.response.data.message;
            this.dismissErrorCountDown = this.dismissSecs;
          })
      }, // End of Get Room function

      info(item, index, button) {
        this.infoModal.title = `Row index: ${index}`
        this.infoModal.content = JSON.stringify(item, null, 2)
        this.$root.$emit('bv::show::modal', this.infoModal.id, button)
      },
      resetInfoModal() {
        this.infoModal.title = ''
        this.infoModal.content = ''
      },
      onFiltered(filteredItems) {
        // Trigger pagination to update the number of buttons/pages due to filtering
        this.totalRows = filteredItems.length
        this.currentPage = 1
      }
    }
  }
</script>
